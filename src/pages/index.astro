---
// ==========================================================
// FRONTMATTER 
// ==========================================================
import Airtable from 'airtable';

// 1. CONFIGURAZIONE DELLA CONNESSIONE
const base = new Airtable({
  apiKey: import.meta.env.AIRTABLE_API_KEY
}).base(import.meta.env.AIRTABLE_BASE_ID);

// 2. PREPARAZIONE DELLA VARIABILE PER I DATI
let items = [];
const titoloPagina = "Il mio archivio";

// 3. RECUPERO DEI DATI DA AIRTABLE (con diagnostica)
try {
  // Messaggio di debug per confermare l'inizio della chiamata
  console.log('--- Inizio recupero dati da Airtable ---');

  const records = await base(import.meta.env.AIRTABLE_TABLE_NAME)
    .select({ 
        maxRecords: 100,
        // CORREZIONE CRITICA: Specifica la vista SENZA filtri
        // Assicurati di aver creato in Airtable una vista chiamata esattamente 'Dati Per Astro'
        view: 'Dati per Astro',
        // Nomi esatti dei campi da recuperare
        fields: ['Nome Immagine', 'immagine', 'Categoria', 'Data']
    })
    .all();
 
  // Messaggio di debug per mostrare il risultato della chiamata
  console.log(`>>> Record recuperati con successo: ${records.length}`);

  // 4. MAPPATURA DEI DATI (trasformazione per l'uso nel template)
  items = records.map(record => ({
    id: record.id,
    title: record.fields['Nome Immagine'], 
    image: record.fields.Immagine?.[0]?.url,
    category: record.fields.Categoria
  }));

} catch (error) {
  // Gestione degli errori: se qualcosa va storto, lo vedrai qui nel terminale
  console.error('!!! ERRORE CRITICO DURANTE IL CARICAMENTO DEI DATI:', error);
}
---

<html lang="it">
<head>
    <meta charset="utf--8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{titoloPagina}</title>
    <style>
        body { font-family: sans-serif; max-width: 1200px; margin: 2rem auto; }
        .controls { margin-bottom: 2rem; }
        .filters button { margin-right: 0.5rem; padding: 0.5rem 1rem; border: 1px solid #ccc; background: #f0f0f0; cursor: pointer; }
        .filters button.active { background: #007bff; color: white; border-color: #007bff; }
        .grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1.5rem; }
        .card { border: 1px solid #ccc; border-radius: 8px; overflow: hidden; }
        .card img { width: 100%; height: 200px; object-fit: cover; }
        .card-content { padding: 1rem; }
    </style>
</head>
<body>
  <!-- valentina -->
    <main>
        <h1>{titoloPagina}</h1>
        <p>Elementi trovati: <span id="count">{items.length}</span></p>

        <div class="controls">
            <div class="filters">
                <button class="filter-btn active" data-category="all">Tutti</button>
                <button class="filter-btn" data-category="Bandiere">Bandiere</button>
                <button class="filter-btn" data-category="Stemmi">Stemmi</button>
                <button class="filter-btn" data-category="Insigne Militari">Insigne Militari</button>
                <button class="filter-btn" data-category="Elementi per Stemmi">Elementi per Stemmi</button>
                <button class="filter-btn" data-category="Altro">Altro</button>
            </div>
            </div>
       
        <div class="grid">
          {items.map(item => (
            <article class="card" data-category={item.category}>
              {item.image && <img src={item.image} alt={item.title} />}
              <div class="card-content">
                <h3>{item.title}</h3>
                {item.category && <span class="category">{item.category}</span>}
              </div>
            </article>
          ))}
        </div>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        const cards = document.querySelectorAll('.card');
        const countElement = document.getElementById('count');

        filterButtons.forEach(button => {
          button.addEventListener('click', function() {
            const category = this.getAttribute('data-category');
            filterButtons.forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
            
            let visibleCount = 0;
            cards.forEach(card => {
              if (category === 'all' || card.getAttribute('data-category') === category) {
                card.style.display = 'block';
                visibleCount++;
              } else {
                card.style.display = 'none';
              }
            });
            countElement.textContent = visibleCount;
          });
        });
      });
    </script>
</body>
</html>